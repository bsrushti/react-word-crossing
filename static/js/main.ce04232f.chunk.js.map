{"version":3,"sources":["Letter.js","Letters.js","LetterHolder.js","LetterHolders.js","App.js","serviceWorker.js","index.js"],"names":["Letter","react_default","a","createElement","className","draggable","onDragStart","this","props","drag","id","value","Component","Letters","letters","i","word","length","character","letter","src_Letter","key","push","LetterHolder","onDrop","onDragOver","LetterHolders","container","numberOfBox","div","src_LetterHolder","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","collectionOfWords","e","dataTransfer","setData","target","data","getData","appendChild","document","getElementById","isWordsPlaced","checkWord","innerText","wordContainer","childNodes","firstChild","includes","flag","preventDefault","src_LetterHolders","drop","bind","allowDrop","src_Letters","style","width","renderLetters","renderLetterHolders","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce04232f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Letter extends Component {\n  render() {\n    return (\n      <div\n        className=\"square\"\n        draggable=\"true\"\n        onDragStart={this.props.drag}\n        id={this.props.id}\n      >\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nexport default Letter;\n","import React, { Component } from \"react\";\nimport Letter from \"./Letter\";\n\nclass Letters extends Component {\n  render() {\n    let letters = [];\n    for (let i = 0; i < this.props.word.length; i++) {\n      let character = this.props.word[i];\n      let letter = (\n        <Letter key={i} value={character} drag={this.props.drag} id={i} />\n      );\n      letters.push(letter);\n    }\n    return letters;\n  }\n}\n\nexport default Letters;\n","import React, { Component } from \"react\";\n\nclass LetterHolder extends Component {\n  render() {\n    return (\n      <div\n        id={this.props.id}\n        className={this.props.className}\n        onDrop={this.props.onDrop}\n        onDragOver={this.props.onDragOver}\n      />\n    );\n  }\n}\n\nexport default LetterHolder;\n","import React, { Component } from \"react\";\nimport LetterHolder from \"./LetterHolder\";\n\nclass LetterHolders extends Component {\n  render() {\n    let container = [];\n    for (let i = 0; i < this.props.numberOfBox; i++) {\n      let div = (\n        <LetterHolder\n          key={i}\n          id={i}\n          className={this.props.className}\n          onDrop={this.props.onDrop}\n          onDragOver={this.props.onDragOver}\n        />\n      );\n      container.push(div);\n    }\n    return container;\n  }\n}\n\nexport default LetterHolders;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Letters from \"./Letters\";\nimport LetterHolders from \"./LetterHolders\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.collectionOfWords = [\"BACK\"];\n    this.word = \"\";\n  }\n\n  drag(e) {\n    e.dataTransfer.setData(\"Text\", e.target.id);\n  }\n\n  drop(e) {\n    let data = e.dataTransfer.getData(\"Text\");\n    e.target.appendChild(document.getElementById(data));\n    if (this.isWordsPlaced() && this.checkWord()) {\n      document.getElementById(\"status\").innerText = \"Correct Word!!\";\n    } else if (this.isWordsPlaced() && !this.checkWord()) {\n      document.getElementById(\"status\").innerText = \"Oops Wrong Word!\";\n    }\n  }\n\n  checkWord() {\n    let word = \"\";\n    let wordContainer = document.getElementById(\"word-container\");\n    for (let i = 0; i < wordContainer.childNodes.length; i++) {\n      word += wordContainer.childNodes[i].firstChild.innerText;\n    }\n    return this.collectionOfWords.includes(word);\n  }\n\n  isWordsPlaced() {\n    let flag = false;\n    let wordContainer = document.getElementById(\"word-container\");\n    for (let i = 0; i < wordContainer.childNodes.length; i++) {\n      flag = wordContainer.childNodes[i].firstChild !== null;\n    }\n    return flag;\n  }\n\n  allowDrop(e) {\n    e.preventDefault();\n  }\n\n  renderLetterHolders(numberOfBox) {\n    return (\n      <LetterHolders\n        numberOfBox={numberOfBox}\n        id=\"box\"\n        className=\"square\"\n        onDrop={this.drop.bind(this)}\n        onDragOver={this.allowDrop.bind(this)}\n      />\n    );\n  }\n\n  renderLetters() {\n    return <Letters word=\"KABC\" drag={this.drag.bind(this)} />;\n  }\n\n  game() {\n    return (\n      <div className=\"Game\">\n        <div className=\"status\" id=\"status\" />\n        <div id=\"\">\n          <div className=\"word-container\" style={{ width: 300 }}>\n            {this.renderLetters()}\n          </div>\n          <div className=\"box\" id=\"word-container\">\n            {this.renderLetterHolders(4)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return <div> {this.game()}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}